/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiExpansionPanelDetails } from "./types";
export { UiExpansionPanelDetails } from "./types";
export namespace Components {
    /**
     * A custom expansion folder component that wraps multiple expansion panels.
     */
    interface UiExpansionFolder {
    }
    /**
     * A custom expansion panel component that can expand and collapse to show or hide details.
     */
    interface UiExpansionPanel {
        /**
          * Data to be used within the expansion panel. This property can be used to pass any data that needs to be accessed or displayed within the expansion panel. The data can be of any type and is parsed from a JSON string if provided as such.
          * @type {any}
         */
        "_data": string | null;
        /**
          * A unique identifier for the expansion panel. This property can be used to distinguish between multiple expansion panels in the same context, allowing for better management and control of individual panels.
          * @type {string}
         */
        "_id": string | null;
        /**
          * Collapses the panel to hide the details. This method updates the CSS custom property for the expanded height to 0px, schedules an animation frame to apply the height change, and sets the expanded property to false.
          * @returns A promise that resolves once the panel is collapsed.
         */
        "collapse": () => Promise<void>;
        /**
          * Determines whether the panel can be collapsed by clicking on its summary. If set to false, the panel will not collapse when the summary is clicked. This property is useful when you want to enforce that the panel remains expanded until another panel is expanded, typically used in conjunction with a parent component that manages the expansion state of multiple panels.
          * @type {boolean}
          * @default true
         */
        "collapsible": boolean;
        /**
          * Expands the panel to show the details. This method updates the CSS custom property for the expanded height and emits the uiExpansionPanelToggle event with the current state and element reference. It also sets the expanded property to true.
          * @returns A promise that resolves once the panel is expanded.
         */
        "expand": () => Promise<void>;
        /**
          * Determines whether the panel is expanded or collapsed.
          * @default false
         */
        "expanded": boolean;
    }
}
export interface UiExpansionPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiExpansionPanelElement;
}
declare global {
    /**
     * A custom expansion folder component that wraps multiple expansion panels.
     */
    interface HTMLUiExpansionFolderElement extends Components.UiExpansionFolder, HTMLStencilElement {
    }
    var HTMLUiExpansionFolderElement: {
        prototype: HTMLUiExpansionFolderElement;
        new (): HTMLUiExpansionFolderElement;
    };
    interface HTMLUiExpansionPanelElementEventMap {
        "uiExpansionPanelExpand": UiExpansionPanelDetails;
    }
    /**
     * A custom expansion panel component that can expand and collapse to show or hide details.
     */
    interface HTMLUiExpansionPanelElement extends Components.UiExpansionPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiExpansionPanelElementEventMap>(type: K, listener: (this: HTMLUiExpansionPanelElement, ev: UiExpansionPanelCustomEvent<HTMLUiExpansionPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiExpansionPanelElementEventMap>(type: K, listener: (this: HTMLUiExpansionPanelElement, ev: UiExpansionPanelCustomEvent<HTMLUiExpansionPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiExpansionPanelElement: {
        prototype: HTMLUiExpansionPanelElement;
        new (): HTMLUiExpansionPanelElement;
    };
    interface HTMLElementTagNameMap {
        "ui-expansion-folder": HTMLUiExpansionFolderElement;
        "ui-expansion-panel": HTMLUiExpansionPanelElement;
    }
}
declare namespace LocalJSX {
    /**
     * A custom expansion folder component that wraps multiple expansion panels.
     */
    interface UiExpansionFolder {
    }
    /**
     * A custom expansion panel component that can expand and collapse to show or hide details.
     */
    interface UiExpansionPanel {
        /**
          * Data to be used within the expansion panel. This property can be used to pass any data that needs to be accessed or displayed within the expansion panel. The data can be of any type and is parsed from a JSON string if provided as such.
          * @type {any}
         */
        "_data"?: string | null;
        /**
          * A unique identifier for the expansion panel. This property can be used to distinguish between multiple expansion panels in the same context, allowing for better management and control of individual panels.
          * @type {string}
         */
        "_id"?: string | null;
        /**
          * Determines whether the panel can be collapsed by clicking on its summary. If set to false, the panel will not collapse when the summary is clicked. This property is useful when you want to enforce that the panel remains expanded until another panel is expanded, typically used in conjunction with a parent component that manages the expansion state of multiple panels.
          * @type {boolean}
          * @default true
         */
        "collapsible"?: boolean;
        /**
          * Determines whether the panel is expanded or collapsed.
          * @default false
         */
        "expanded"?: boolean;
        /**
          * Event emitted when the panel is expanded. This event is triggered whenever the panel is expanded, providing details about the panel's state. The event detail contains the element reference, the panel's unique identifier, and any associated data.
         */
        "onUiExpansionPanelExpand"?: (event: UiExpansionPanelCustomEvent<UiExpansionPanelDetails>) => void;
    }
    interface IntrinsicElements {
        "ui-expansion-folder": UiExpansionFolder;
        "ui-expansion-panel": UiExpansionPanel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A custom expansion folder component that wraps multiple expansion panels.
             */
            "ui-expansion-folder": LocalJSX.UiExpansionFolder & JSXBase.HTMLAttributes<HTMLUiExpansionFolderElement>;
            /**
             * A custom expansion panel component that can expand and collapse to show or hide details.
             */
            "ui-expansion-panel": LocalJSX.UiExpansionPanel & JSXBase.HTMLAttributes<HTMLUiExpansionPanelElement>;
        }
    }
}
