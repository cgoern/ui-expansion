/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiExpansionPanelDetails } from "./types";
export { UiExpansionPanelDetails } from "./types";
export namespace Components {
    /**
     * A custom expansion folder component that wraps multiple expansion panels.
     */
    interface UiExpansionFolder {
    }
    /**
     * A custom expansion panel component that can expand and collapse to show or hide details.
     */
    interface UiExpansionPanel {
        /**
          * Collapses the panel to hide the details. This method updates the CSS custom property for the expanded height to 0px, schedules an animation frame to apply the height change, and sets the expanded property to false. It ensures that the panel transitions smoothly to its collapsed state, making the details content hidden. The method returns a promise that resolves once the panel is collapsed.
          * @returns A promise that resolves once the panel is collapsed.
         */
        "collapse": () => Promise<void>;
        /**
          * Determines whether the panel can be collapsed by clicking on its summary. If set to false, the panel will not collapse when the summary is clicked. This property is useful when you want to enforce that the panel remains expanded until another panel is expanded, typically used in conjunction with a parent component that manages the expansion state of multiple panels.
          * @type {boolean}
          * @default true
         */
        "collapsible": boolean;
        /**
          * Data to be used within the expansion panel. This property can be used to pass any data that needs to be accessed or displayed within the expansion panel. The data can be of any type and is parsed from a JSON string if provided as such.
          * @type {any}
         */
        "data": string | null;
        /**
          * Expands the panel to show the details. This method updates the CSS custom property for the expanded height and sets the expanded property to true. It ensures that the panel transitions smoothly to its expanded state, making the details content fully visible. The method returns a promise that resolves once the panel is expanded.
          * @returns A promise that resolves once the panel is expanded.
         */
        "expand": () => Promise<void>;
        /**
          * Determines whether the panel is expanded or collapsed.
          * @default false
         */
        "expanded": boolean;
        /**
          * Retrieves the data associated with the expansion panel. This method returns the _data property, which contains any additional information or metadata that has been associated with the expansion panel. It provides a way to access the contextual information or state that is relevant to the panel's details or behavior.
          * @returns A promise that resolves to the data associated with the panel, or null if no data is available.
         */
        "getData": () => Promise<unknown | null>;
        /**
          * Toggles the expanded state of the panel. This method is called when the summary is clicked, and it schedules an animation frame to either expand or collapse the panel based on its current state. If an animation frame is already scheduled, it cancels the pending frame before scheduling a new one. It also emits the uiExpansionPanelToggle event with the current state and element reference.
          * @returns A promise that resolves when the panel has been toggled.
         */
        "toggle": () => Promise<void>;
    }
}
export interface UiExpansionPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiExpansionPanelElement;
}
declare global {
    /**
     * A custom expansion folder component that wraps multiple expansion panels.
     */
    interface HTMLUiExpansionFolderElement extends Components.UiExpansionFolder, HTMLStencilElement {
    }
    var HTMLUiExpansionFolderElement: {
        prototype: HTMLUiExpansionFolderElement;
        new (): HTMLUiExpansionFolderElement;
    };
    interface HTMLUiExpansionPanelElementEventMap {
        "uiExpansionPanelToggle": UiExpansionPanelDetails;
    }
    /**
     * A custom expansion panel component that can expand and collapse to show or hide details.
     */
    interface HTMLUiExpansionPanelElement extends Components.UiExpansionPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiExpansionPanelElementEventMap>(type: K, listener: (this: HTMLUiExpansionPanelElement, ev: UiExpansionPanelCustomEvent<HTMLUiExpansionPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiExpansionPanelElementEventMap>(type: K, listener: (this: HTMLUiExpansionPanelElement, ev: UiExpansionPanelCustomEvent<HTMLUiExpansionPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiExpansionPanelElement: {
        prototype: HTMLUiExpansionPanelElement;
        new (): HTMLUiExpansionPanelElement;
    };
    interface HTMLElementTagNameMap {
        "ui-expansion-folder": HTMLUiExpansionFolderElement;
        "ui-expansion-panel": HTMLUiExpansionPanelElement;
    }
}
declare namespace LocalJSX {
    /**
     * A custom expansion folder component that wraps multiple expansion panels.
     */
    interface UiExpansionFolder {
    }
    /**
     * A custom expansion panel component that can expand and collapse to show or hide details.
     */
    interface UiExpansionPanel {
        /**
          * Determines whether the panel can be collapsed by clicking on its summary. If set to false, the panel will not collapse when the summary is clicked. This property is useful when you want to enforce that the panel remains expanded until another panel is expanded, typically used in conjunction with a parent component that manages the expansion state of multiple panels.
          * @type {boolean}
          * @default true
         */
        "collapsible"?: boolean;
        /**
          * Data to be used within the expansion panel. This property can be used to pass any data that needs to be accessed or displayed within the expansion panel. The data can be of any type and is parsed from a JSON string if provided as such.
          * @type {any}
         */
        "data"?: string | null;
        /**
          * Determines whether the panel is expanded or collapsed.
          * @default false
         */
        "expanded"?: boolean;
        /**
          * Event emitted when the expansion panel is toggled. This event is triggered whenever the panel is expanded or collapsed, providing details about the current state of the panel, including a reference to the element, the expanded state, the panel's unique identifier, and any associated data.
          * @event uiExpansionPanelToggle
          * @type {CustomEvent<UiExpansionPanelDetails>}
          * @property {HTMLUiExpansionPanelElement} element - The host element of the expansion panel.
          * @property {boolean} expanded - The current expanded state of the panel.
          * @property {unknown | null} data - Any associated data or metadata related to the panel.
         */
        "onUiExpansionPanelToggle"?: (event: UiExpansionPanelCustomEvent<UiExpansionPanelDetails>) => void;
    }
    interface IntrinsicElements {
        "ui-expansion-folder": UiExpansionFolder;
        "ui-expansion-panel": UiExpansionPanel;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A custom expansion folder component that wraps multiple expansion panels.
             */
            "ui-expansion-folder": LocalJSX.UiExpansionFolder & JSXBase.HTMLAttributes<HTMLUiExpansionFolderElement>;
            /**
             * A custom expansion panel component that can expand and collapse to show or hide details.
             */
            "ui-expansion-panel": LocalJSX.UiExpansionPanel & JSXBase.HTMLAttributes<HTMLUiExpansionPanelElement>;
        }
    }
}
