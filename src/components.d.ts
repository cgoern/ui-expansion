/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { UiExpansionPanelExpandEventDetails } from "./types";
export { UiExpansionPanelExpandEventDetails } from "./types";
export namespace Components {
    /**
     * A custom expansion panel component that can expand and collapse to show or hide content.
     */
    interface UiExpansionPanel {
        /**
          * A unique identifier for the expansion panel. This property can be used to distinguish between multiple expansion panels in the same context, allowing for better management and control of individual panels.
          * @type {string}
         */
        "_id": string;
        /**
          * Collapses the panel to hide the content. This method updates the CSS custom property for the expanded height to 0px, schedules an animation frame to apply the height change, and sets the expanded property to false.
          * @returns A promise that resolves once the panel is collapsed.
         */
        "collapse": () => Promise<void>;
        /**
          * Expands the panel to show the content. This method updates the CSS custom property for the expanded height and emits the uiExpansionPanelExpand event with the current state and element reference. It also sets the expanded property to true.
          * @returns A promise that resolves once the panel is expanded.
         */
        "expand": () => Promise<void>;
        /**
          * Determines whether the panel is expanded or collapsed.
          * @default false
         */
        "expanded": boolean;
    }
    interface UiExpansionPanelFolder {
    }
}
export interface UiExpansionPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiExpansionPanelElement;
}
declare global {
    interface HTMLUiExpansionPanelElementEventMap {
        "uiExpansionPanelExpand": UiExpansionPanelExpandEventDetails;
        "uiExpansionPanelCollapse": UiExpansionPanelExpandEventDetails;
    }
    /**
     * A custom expansion panel component that can expand and collapse to show or hide content.
     */
    interface HTMLUiExpansionPanelElement extends Components.UiExpansionPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiExpansionPanelElementEventMap>(type: K, listener: (this: HTMLUiExpansionPanelElement, ev: UiExpansionPanelCustomEvent<HTMLUiExpansionPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiExpansionPanelElementEventMap>(type: K, listener: (this: HTMLUiExpansionPanelElement, ev: UiExpansionPanelCustomEvent<HTMLUiExpansionPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiExpansionPanelElement: {
        prototype: HTMLUiExpansionPanelElement;
        new (): HTMLUiExpansionPanelElement;
    };
    interface HTMLUiExpansionPanelFolderElement extends Components.UiExpansionPanelFolder, HTMLStencilElement {
    }
    var HTMLUiExpansionPanelFolderElement: {
        prototype: HTMLUiExpansionPanelFolderElement;
        new (): HTMLUiExpansionPanelFolderElement;
    };
    interface HTMLElementTagNameMap {
        "ui-expansion-panel": HTMLUiExpansionPanelElement;
        "ui-expansion-panel-folder": HTMLUiExpansionPanelFolderElement;
    }
}
declare namespace LocalJSX {
    /**
     * A custom expansion panel component that can expand and collapse to show or hide content.
     */
    interface UiExpansionPanel {
        /**
          * A unique identifier for the expansion panel. This property can be used to distinguish between multiple expansion panels in the same context, allowing for better management and control of individual panels.
          * @type {string}
         */
        "_id"?: string;
        /**
          * Determines whether the panel is expanded or collapsed.
          * @default false
         */
        "expanded"?: boolean;
        /**
          * Event emitted when the expansion panel is collapsed. This event provides details about the collapse state and the element reference. It can be used to perform actions or trigger updates when the panel is collapsed.
          * @event uiExpansionPanelCollapse
          * @type {CustomEvent<UiExpansionPanelExpandEventDetails>}
          * @property {HTMLUiExpansionPanelElement} element - The reference to the expansion panel element.
          * @property {string} [id] - The unique identifier of the expansion panel, if provided.
         */
        "onUiExpansionPanelCollapse"?: (event: UiExpansionPanelCustomEvent<UiExpansionPanelExpandEventDetails>) => void;
        /**
          * Event emitted when the expansion panel is expanded. This event provides details about the expansion state and the element reference. It can be used to perform actions or trigger updates when the panel is expanded.
          * @event uiExpansionPanelExpand
          * @type {CustomEvent<UiExpansionPanelExpandEventDetails>}
          * @property {HTMLUiExpansionPanelElement} element - The reference to the expansion panel element.
          * @property {string} [id] - The unique identifier of the expansion panel, if provided.
         */
        "onUiExpansionPanelExpand"?: (event: UiExpansionPanelCustomEvent<UiExpansionPanelExpandEventDetails>) => void;
    }
    interface UiExpansionPanelFolder {
    }
    interface IntrinsicElements {
        "ui-expansion-panel": UiExpansionPanel;
        "ui-expansion-panel-folder": UiExpansionPanelFolder;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A custom expansion panel component that can expand and collapse to show or hide content.
             */
            "ui-expansion-panel": LocalJSX.UiExpansionPanel & JSXBase.HTMLAttributes<HTMLUiExpansionPanelElement>;
            "ui-expansion-panel-folder": LocalJSX.UiExpansionPanelFolder & JSXBase.HTMLAttributes<HTMLUiExpansionPanelFolderElement>;
        }
    }
}
